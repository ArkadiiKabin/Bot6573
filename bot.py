"""
–ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞
–°–ø–µ—Ä–≤–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
–ó–∞—Ç–µ–º —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∫–æ–º–∞–Ω–¥–∞–º.
–ó–∞—Ç–µ–º –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–∫–∞ –≤—ã –Ω–µ –Ω–∞–∂–º—ë—Ç–µ Ctrl-C –≤ –∫–æ–Ω—Å–æ–ª–∏

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
–ü—Ä–æ—Å—Ç–æ —ç—Ö–æ-–±–æ—Ç.–ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
–Ω–∞–∂–º–∏—Ç–µ Ctrl-C –∫–æ–Ω—Å–æ–ª–∏ —á—Ç–æ –±—ã –æ—Å—Ç–æ–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞
"""

#–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –±–æ—Ç–∞
import logging #–ü–∏—à–µ—Ç –ª–æ–≥–∏, –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω–∞—è —à—Ç—É–∫–∞

#–î–µ–ª–∞—é—Ç –∑–∞ –Ω–∞—Å –≤—Å—é —Ä–∞–±–æ—Ç—É
from telegram import Update, ForceReply,InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext,CallbackQueryHandler

import random

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__)


# Define a few command handlers. These usually take the two arguments update and
# context.
def start(update: Update, context: CallbackContext) -> None:
    """Send a message when the command /start is issued."""
    user = update.effective_user
    update.message.reply_text('Hi,'+ user.first_name+' !')
    #–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    # update.message.reply_markdown_v2(
    #     fr'Hi {user.mention_markdown_v2()}\!',
    #     reply_markup=ForceReply(selective=True),
    # )


def help_command(update: Update, context: CallbackContext) -> None:
    """Send a message when the command /help is issued."""
    update.message.reply_text('''/start - –Ω–∞—á–∞–ª–æ
/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥
/randomEmoji - —Å–ª—É—á–∞–π–Ω–∞—è —ç–º–æ—Ü–∏—è
/about - –æ–±–æ –º–Ω–µ
/plus - —Å–ª–æ–∂–µ–Ω–∏–µ –¥–≤—É—Ö —á–∏—Å–µ–ª
/divide - –¥–µ–ª–∏—Ç –¥–≤–∞ —á–∏—Å–ª–∞
/quest - –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å
/youtube - —Å—Å—ã–ª–∫–∞ –Ω–∞ —é—Ç—É–±
    ''')

def about_command(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('–Ø ,–≤–µ–ª–∏–∫–∏–π –∏ —É–∂–∞—Å–Ω—ã–π, —Å–æ–∑–¥–∞–ª —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤ 2022 –≥–æ–¥—É!!!')

def echo(update: Update, context: CallbackContext) -> None:
    """Echo the user message."""
    update.message.reply_text(update.message.text)

def randomEmoji(update: Update, context: CallbackContext) -> None:
    emojiList = ['üòÅ','üòÇ','üòÉ','üòÑ','üòÖ','üòç']
    myEmoji = random.choice(emojiList)
    update.message.reply_text(myEmoji)

# —Å–∫–ª–∞–¥—ã–≤–∞–µ–º –¥–≤–∞ —á–∏—Å–ª–∞
def plus(update: Update, context: CallbackContext) -> None:
    try:
        one = int(context.args[0])
        two = int(context.args[1])
        answ = one+two
        update.message.reply_text(f"{one}+{two}={answ}")
    except (IndexError, ValueError):
        update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ: /plus <first_num> <second_num>')

# —Å–∫–ª–∞–¥—ã–≤–∞–µ–º –¥–≤–∞ —á–∏—Å–ª–∞
def divide(update: Update, context: CallbackContext) -> None:
    try:
        one = int(context.args[0])
        two = int(context.args[1])
        if two == 0 :
            update.message.reply_text("–ù–∞ –Ω–æ–ª—å –¥–µ–ª–∏—Ç—å –Ω–µ–ª—å–∑—è!")
        else:
            answ = one/two
            update.message.reply_text(f"{one}/{two}={answ}")
    except (IndexError, ValueError):
        update.message.reply_text('–ü—Ä–∞–≤–∏–ª—å–Ω–æ: /divide <first_num> <second_num>')

def youtube(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('https://python-telegram-bot.org/')

def quest(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [
            InlineKeyboardButton("–ö–∞–º–µ–Ω—å", callback_data='–ö–∞–º–µ–Ω—å'),
            InlineKeyboardButton("–ù–æ–∂–Ω–∏—Ü—ã", callback_data='–ù–æ–∂–Ω–∏—Ü—ã'),
        ],
        [InlineKeyboardButton("–ë—É–º–∞–≥–∞", callback_data='–ë—É–º–∞–≥–∞')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    update.message.reply_text('–°–¥–µ–ª–∞–π –≤—ã–±–æ—Ä:', reply_markup=reply_markup)

def button(update: Update, context: CallbackContext) -> None:
    """Parses the CallbackQuery and updates the message text."""
    query = update.callback_query

    # CallbackQueries need to be answered, even if no notification to the user is needed
    # Some clients may have trouble otherwise. See https://core.telegram.org/bots/api#callbackquery
    query.answer()
    answ = query.data
    wars = ["–ö–∞–º–µ–Ω—å", "–ù–æ–∂–Ω–∏—Ü—ã", "–ë—É–º–∞–≥–∞"]
    comp = random.choice(wars)
    if answ == comp:
        query.edit_message_text(text=f"{answ} i {comp} eto nichia")
    elif answ == "–ö–∞–º–µ–Ω—å" and comp == "–ù–æ–∂–Ω–∏—Ü—ã":
        query.edit_message_text(text=f"{answ} –±—å—ë—Ç {comp}.–¢—ã –ø–æ–±–µ–¥–∏–ª!")
    elif answ == "–ù–æ–∂–Ω–∏—Ü—ã" and comp == "–ë—É–º–∞–≥–∞":
        query.edit_message_text(text=f"{answ} –±—å—ë—Ç {comp}.–¢—ã –ø–æ–±–µ–¥–∏–ª!")
    elif answ == "–ë—É–º–∞–≥–∞" and comp == "–ö–∞–º–µ–Ω—å":
        query.edit_message_text(text=f"{answ} –±—å—ë—Ç {comp}.–¢—ã –ø–æ–±–µ–¥–∏–ª!")
    else:
        query.edit_message_text(text=f"{comp} –±—å—ë—Ç {answ}.–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ –ø–µ—Ä–µ–¥–∞—ë–º —Ç–æ–∫–µ–Ω
    updater = Updater("5682288106:AAHbGxF-1_fqnGFfanmUULXOIVYmIoHmJDw")

    # –°–æ–∑–¥–∞—ë–º –¥–∏—Å–ø–µ—á–µ—Ä–∞
    dispatcher = updater.dispatcher

    # –ü–æ —Ä–∞–∑–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CommandHandler("about", about_command))
    dispatcher.add_handler(CommandHandler("randomEmoji", randomEmoji))
    dispatcher.add_handler(CommandHandler("random", randomEmoji))
    dispatcher.add_handler(CommandHandler("youtube", youtube))

    # –ü–æ —Ä–∞–∑–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    updater.dispatcher.add_handler(CommandHandler('quest', quest))
    updater.dispatcher.add_handler(CallbackQueryHandler(button))

    dispatcher.add_handler(CommandHandler("plus", plus))
    dispatcher.add_handler(CommandHandler("divide", divide))
    # –ü–æ –ù–ï –∫–æ–º–∞–Ω–¥–µ –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —ç—Ö–æ
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, echo))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    updater.start_polling()

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()


if __name__ == '__main__':
    main()